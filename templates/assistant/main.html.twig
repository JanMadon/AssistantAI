{% extends 'layout/base.html.twig' %}


{% block title %}AI Assistant{% endblock %}

{% block body %}
    <div class="container-fluid row w-100 mx-0 px-0">
        <div class="row mx-0 px-0">
            {% include 'assistant/assistant-bar.html.twig' %}
            <div class="col mt-2">
                <div class="form-group">
                    <h5>System</h5>
                    <label for="systemInput"></label>
                    <textarea style="height: 300px;" class="form-control d-inline-block" id="systemInput" placeholder="Enter system command or info"></textarea>
                </div>
            </div>

            <div class="chat col d-flex flex-column justify-content-between mt-2">
                <div class="chat-box" id="chatBox">
                    <h5>Conversation</h5>
                </div>
                <div class="input-section ">
                    <div class="input-group">
                        <label for="userInput"></label>
                        <textarea type="text" class="form-control" id="userInput" placeholder="Type your message..." onkeydown="checkEnter(event)"></textarea>
                        <button class="btn btn-primary" type="button" onclick="sendMessage()">Send</button>
                    </div>
                </div>
            </div>

            <div class="col-2 border-start bg-secondary-subtle p-0">
                <div class="border-bottom p-3">
                    <label for="modelSelektor"> Model </label>
                    <select id="modelSelektor" class="form-select form-select-sm" aria-label="Default select example">
                        {% for model in models %}
                            <option value="{{ model }}" {{ model == 'gpt-3.5-turbo' ? 'selected' : '' }} >{{ model }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="border-bottom p-3">
                    <div class="d-flex justify-content-between align-items-center w-min">
                        <label for="temperatureRange" class="form-label">Temperature</label>
                        <label for="temperatureNumber"></label>
                        <input type="number" class="form-control number-control form-control-sm w-25"
                               id="temperatureNumber" min="0" max="2" step="0.01" value="1" disabled>
                    </div>
                    <input type="range" class="form-range" id="temperatureRange" min="0" max="2" step="0.01">
                </div>
            </div>

        </div>
    </div>
    <style>
        input[type=number]::-webkit-outer-spin-button,
        input[type=number]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* Dla Firefoksa */
        input[type=number] {
            -moz-appearance: textfield;
        }
    </style>
{% endblock %}


{% block javascripts %}
    <script>
        const temperatureRange = document.getElementById('temperatureRange')
        const temperatureNumber = document.getElementById('temperatureNumber')
        temperatureRange.addEventListener('input', () => {
            temperatureNumber.value = temperatureRange.value
        })


        let systemInput = document.getElementById('systemInput')
        let userInput = document.getElementById('userInput')
        let conversation = document.getElementById('chatBox')
        let conversation_id = null;

        function checkEnter(event) {
            if (event.key === 'Enter') {
                sendMessage()
            }
        }


        fillSystemField = (content) => {
            let showingMessages = conversation.querySelectorAll('.conversation')
            for (let message of showingMessages) {
                message.remove()
            }
            systemInput.value = content
        }

        function fillChatBox(selectConv) {
            //clear
            let showingMessages = conversation.querySelectorAll('.conversation')
            for (let message of showingMessages) {
                message.remove()
            }
            systemInput.value = ''
            userInput.value = ''

            // fill
            console.log(selectConv)
            conversation_id = selectConv.id
            systemInput.value = selectConv.system_field
            selectConv.messages.forEach(message => {
                let messageField = document.createElement('div');
                messageField.className = 'conversation ' + message.author.toLowerCase()
                messageField.innerHTML = message.author + ': ' + message.content;
                conversation.appendChild(messageField);
            })
        }

        async function sendMessage() {
            if (userInput.value.trim() !== '') {
                let chatBox = document.getElementById('chatBox');
                let userMessage = document.createElement('div');
                userMessage.className = 'conversation user'
                userMessage.textContent = 'User: ' + userInput.value;
                chatBox.appendChild(userMessage);

                let aiMessage = document.createElement('div');
                aiMessage.className = 'conversation ai';
                aiMessage.innerHTML = 'AI: ' + await getAIResponse(systemInput.value, chatBox);
                chatBox.appendChild(aiMessage);

                document.getElementById('userInput').value = '';
                chatBox.scrollTop = chatBox.scrollHeight;
            }
        }

        async function getAIResponse(system, chatBox) {
            let messages = chatBox.getElementsByClassName('conversation')
            const conversation = [];

            for (let message of messages) {
                message = (message.textContent).split(':');
                let $site = message.shift();

                if ($site === 'User') {
                    conversation.push({'User': message[0]})
                } else if ($site === 'AI') {
                    conversation.push({'AI': message[0]})
                } else {
                    console.error($site)
                }
            }
            return (await askChat(system, conversation)).replace("```python", "<pre>").replace("```", "</pre>");
        }

        async function askChat(system, conversation) {
            const data = {
                'id': conversation_id,
                'system': system,
                'conversation': conversation,
                'model': document.getElementById("modelSelektor").value ?? null,
                'config': {
                    'temperature': temperatureNumber.value,
                }
            }

            console.log(JSON.stringify(data))
            try {
                const response = await axios.post("{{ path('assistent_prompt') }}", data)
                conversation_id = response.data.id
                return response.data.answer

            } catch (error) {
                console.error(error)
                return null
            }
        }
    </script>
{% endblock %}

