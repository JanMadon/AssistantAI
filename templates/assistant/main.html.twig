{% extends 'layout/base.html.twig' %}


{% block title %}AI Assistant{% endblock %}

{% block body %}
    <div class="container-fluid row w-100 mx-0 px-0">
        <div class="row mx-0 px-0">
            {% include 'assistant/assistant-bar.html.twig' %}
            <div class="col mt-2">
                <div class="form-group">
                    <h5>System</h5>
                    <label for="systemInput"></label>
                    <textarea style="height: 300px;" class="form-control d-inline-block" id="systemInput" placeholder="Enter system command or info"></textarea>
                </div>
                <div class="flex mb-3 mt-2">
                    <label for="formFileSm" class="form-label">Small file input example</label>
                    <input class="form-control form-control-sm" id="formFileSm" type="file" accept=".mp3,audio/mpeg">
                    <button class="btn btn-primary btn-sm" type="button" onclick="setFile()">Send file</button>
                </div>
                <div class="form-check form-switch mt-5">
                    <label class="form-check-label" for="use-function-calling">Use function calling</label>
                    <input class="form-check-input" type="checkbox" role="switch" id="use-function-calling">
                </div>
            </div>

            <div class="chat col d-flex flex-column justify-content-between mt-2">
                <div class="chat-box" id="chatBox">
                    <h5>Conversation</h5>
                </div>
                <div class="input-section ">
                    <div class="input-group">
                        <label for="userInput"></label>
                        <textarea type="text" class="form-control" id="userInput" placeholder="Type your message..." onkeydown="checkEnter(event)"></textarea>
                        <button class="btn btn-primary" type="button" onclick="sendLastMessage()">Send</button>
                    </div>
                </div>
            </div>

            <div class="col-2 border-start bg-secondary-subtle p-0">
                <div class="border-bottom p-1">
                    <p class="small m-0">Usage tokens </p>
                    <div class="px-1 py-0 d-flex justify-content-between">
                        <p class="small m-0">total: </p>
                        <p id="total-prompt-num" class="small m-0">0</p>
                    </div>
                    <div class="px-1 py-0 m-0 d-flex justify-content-between">
                        <p class="small m-0">last mes.: </p>
                        <p id="last-prompt-num" class="small m-0">0</p>
                    </div>
                </div>

                <div class="border-bottom p-3">
                    <label for="settingsChat"> Template Settings LMM </label>
                    <select id="settingsChat" class="form-select form-select-sm" aria-label="Default select example">
                        {% set defaultId = null %}
                        {% for lmmSetting in lmmSettings %}
                            {% if lmmSetting.default %}
                            {% set defaultId = loop.index0 %}
                            {% endif %}
                            <option value="{{ lmmSetting.id }}" {{ lmmSetting.default ? 'selected' : '' }} data-default="{{ lmmSetting.default ? 'true' : 'false' }}">
                                {{ lmmSetting.name }}
                            </option>
                        {% endfor %}
                    </select>
                    <div class="d-flex justify-content-end">
                        <button hidden onclick="setDefaultTemplate(this)" id="saveAsDefaultBtn" type="button" class="btn btn-outline-primary mt-1" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;">Set as default </button>
                    </div>
                </div>
                <div class="border-bottom p-3">
                    <label for="modelSelektor"> Model </label>
                    <select id="modelSelektor" class="form-select form-select-sm" aria-label="Default select example">
                        {% for model in models %}
                            <option id="{{ model.id }}" value="{{ model.id }}" {{ model.id == 'gpt-4o-mini'  ? 'selected' : '' }} >{{ model.id }}</option>
{#                            <option id="{{ model.id }}" value="{{ model.id }}" {{ lmmSettings[defaultId].modelId ? 'selected' : '' }} >{{ model.id }}</option>#}
                        {% endfor %}
                    </select>
                </div>
                <div class="border-bottom p-3">
                    <div class="d-flex justify-content-between align-items-center w-min">
                        <label for="temperatureRange" class="form-label">Temperature</label>
                        <label for="temperatureNumber"></label>
                        <input type="number" class="form-control number-control form-control-sm w-25"
                               id="temperatureNumber" min="0" max="2" step="0.01" value="{{ lmmSettings[defaultId].temperature }}" disabled>
                    </div>
                    <input type="range" class="form-range" id="temperatureRange" min="0" max="2" step="0.01">
                </div>
                <div class="border-bottom p-3">
                    <div class="d-flex justify-content-between align-items-center w-min">
                        <label for="maxTokenRange" class="form-label">Max token</label>
                        <label for="maxTokenNumber"></label>
                        <input type="number" class="form-control number-control form-control-sm w-auto"
                               id="maxTokenNumber" min="10" max="2000" step="1" value="{{ lmmSettings[defaultId].maxToken ?? '600' }}" disabled>
                    </div>
                    <input type="range" class="form-range" id="maxTokenRange" min="10" max="2000" step="1">
                </div>
                <div class="d-flex justify-content-end p-3">
                    <button class="btn btn-outline-primary" type="button" onclick="saveSettingsTemplate()">Save</button>
                </div>
                <div id="modal-save-settings" class="modal-save-settings" hidden>
                    <label for="settingsTemplate" class="form-label">Save as: </label>
                    <input type="text" class="form-control number-control form-control-sm m-2" id="settingsTemplate">
                </div>

            </div>

        </div>
    </div>
    <style>
        input[type=number]::-webkit-outer-spin-button,
        input[type=number]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* Dla Firefoksa */
        input[type=number] {
            -moz-appearance: textfield;
        }
    </style>
{% endblock %}


{% block javascripts %}
    <script>
        const temperatureRange = document.getElementById('temperatureRange')
        const temperatureNumber = document.getElementById('temperatureNumber')
        temperatureRange.addEventListener('input', () => {
            temperatureNumber.value = temperatureRange.value
        })

        const maxTokenRange = document.getElementById('maxTokenRange')
        const maxTokenNumber = document.getElementById('maxTokenNumber')
        maxTokenRange.addEventListener('input', () => {
            maxTokenNumber.value = maxTokenRange.value
        })

        let systemInput = document.getElementById('systemInput')
        let userInput = document.getElementById('userInput')
        let conversation = document.getElementById('chatBox')
        let conversation_id = null;
        let totalTokenCounter = 0;

        const selectedChatModel = document.getElementById('modelSelektor')
        const modalSaveTemplate = document.getElementById('modal-save-settings')

        /** SAVE LMM SETTINGS */
        function saveSettingsTemplate() {
            let settingsTemplate = document.getElementById('settingsTemplate').value

            if (settingsTemplate === '') {
                modalSaveTemplate.removeAttribute('hidden')
                return
            }

            let model = document.getElementById('modelSelektor').value
            let temperature = document.getElementById('temperatureNumber').value
            let maxToken = document.getElementById('maxTokenNumber').value
            let data = {
                'name': settingsTemplate,
                'model': model,
                'temperature': temperature,
                'maxToken': maxToken,
            }

            console.log(data)

            axios.post("{{ path('assistent_save_settings') }}", data)
                .then(response => {
                    console.log(response)
                    alert('Saved')
                })
                .catch(error => {
                    console.error(error)
                })

        }

        /** SAVE TEMPLATE AS DEFAULT */
        document.getElementById('settingsChat').addEventListener('change', function () {
            document.getElementById('saveAsDefaultBtn').removeAttribute('hidden')
        })

         function setDefaultTemplate(el) {
            let data = { 'id': document.getElementById('settingsChat').value }

            axios.post("{{ path('assistent_save_setting_default') }}", data)
                .then(response => {
                    el.setAttribute('hidden', 'hidden')
                    console.log(response)

                })
                .catch(error => {
                    alert('Error')
                    console.error(error)
                })
        }


        /** SEND MESSAGE BY ENTER KEY*/
        function checkEnter(event) {
            if (event.key === 'Enter') {
                sendLastMessage()
            }
        }

        /** FILL SYSTEM WINDOW WITH TEMPLATE */
        fillSystemField = (content) => {
            let showingMessages = conversation.querySelectorAll('.conversation')
            for (let message of showingMessages) {
                message.remove()
            }
            systemInput.value = content
        }

        /** FILL CHAT HISTORY */
        function fillChatBox(selectConv) {
            //clear
            let showingMessages = conversation.querySelectorAll('.conversation')
            for (let message of showingMessages) {
                message.remove()
            }
            systemInput.value = ''
            userInput.value = ''

            // fill
            console.log(selectConv)
            conversation_id = selectConv.id
            systemInput.value = selectConv.system_field
            selectConv.messages.forEach(message => {
                let messageField = document.createElement('div');
                messageField.className = 'conversation ' + message.author.toLowerCase()
                messageField.innerHTML = message.author + ': ' + message.content;
                conversation.appendChild(messageField);
            })
        }


        function setFile() {
            const fileInput = document.querySelector('#formFileSm');

            if (fileInput.files.length === 0) {
                alert('Wybierz plik przed wysłaniem!');
                return;
            }

            console.log(fileInput.files[0].name)

            const formData = new FormData();
            formData.append('file', fileInput.files[0]);

            axios.post("{{ path('assistant_prompt_file') }}", formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
            })
                .then(response => {
                    console.log('Added file successful:', response.data);
                    alert('Added file successful');
                })
                .catch(error => {
                    console.error('error', error);
                    alert('Something went wrong. Please try again later.');
                });
        }



        /** SEND SIMPLE USER MESSAGE */
        async function sendLastMessage() {
            if (!systemInput.value || !userInput.value) {
                alert('Please enter system command or user message');
                return;
            }

            !userInput.value ? alert('Please enter user message') : console.log('user: ' + userInput.value)

            let chatBox = document.getElementById('chatBox');
            let userMessage = document.createElement('div');
            userMessage.className = 'conversation user'
            userMessage.textContent = 'User: ' + userInput.value;
            chatBox.appendChild(userMessage);

            console.log('test')
            let fileName = document.querySelector('#formFileSm')?.files[0]?.name ?? null

            const data = {
                'id': conversation_id,
                'system': systemInput.value,
                'message': {
                    'role': 'User',
                    'content': userInput.value + (fileName ? ` [file_name: ${fileName}]` : ''),
                },
                'file': fileName,
                'model': document.getElementById("modelSelektor").value ?? null,
                'config': {
                    'temperature': temperatureNumber.value,
                    'max_token': maxTokenNumber.value,
                    'function_calling': document.getElementById("use-function-calling").checked ?? false
                },
                'additional': {
                    'file_name': fileName
                }
            }
            console.log(data)

            userInput.value = ''

            let aiMessage = document.createElement('div');
            aiMessage.className = 'conversation ai';
            aiMessage.innerHTML = 'AI: ' + await requestChat(data);
            chatBox.appendChild(aiMessage);
            document.getElementById('userInput').value = '';
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        async function requestChat(data) {
            console.log(JSON.stringify(data))

            try {
                const response = await axios.post("{{ path('assistant_prompt') }}", data)
                console.log(response)
                conversation_id = response.data.id
                totalTokenCounter += response.data.usage_tokens.total
                document.getElementById('total-prompt-num').textContent = totalTokenCounter
                document.getElementById('last-prompt-num').textContent = response.data.usage_tokens.total
                return response.data.answer

            } catch (error) {
                console.error(error)
                return  error
            }
        }



        /** SEND ALL CONVERSATION MESSAGE BY AXIOS */
        async function sendMessage() {
            if (userInput.value.trim() !== '') {
                let chatBox = document.getElementById('chatBox');
                let userMessage = document.createElement('div');
                userMessage.className = 'conversation user'
                userMessage.textContent = 'User: ' + userInput.value;
                chatBox.appendChild(userMessage);

                let aiMessage = document.createElement('div');
                aiMessage.className = 'conversation ai';
                aiMessage.innerHTML = 'AI: ' + await getAIResponse(systemInput.value, chatBox);
                chatBox.appendChild(aiMessage);

                document.getElementById('userInput').value = '';
                chatBox.scrollTop = chatBox.scrollHeight;
            }
        }

        async function getAIResponse(system, chatBox) {
            let messages = chatBox.getElementsByClassName('conversation')
            const conversation = [];

            for (let message of messages) {
                message = (message.textContent).split(':');
                let $site = message.shift();

                if ($site === 'User') {
                    conversation.push({role: 'User', content: message[0]})
                } else if ($site === 'AI') {
                    conversation.push({role: 'Assistant', content: message[0]})
                } else {
                    console.error($site)
                }
            }
            return (await askChat(system, conversation)).replace("```python", "<pre>").replace("```", "</pre>");
        }

        async function askChat(system, conversation) {
            const data = {
                'id': conversation_id,
                'system': system,
                'conversation': conversation,
                'model': document.getElementById("modelSelektor").value ?? null,
                'config': {
                    'temperature': temperatureNumber.value,
                }
            }

            console.log(JSON.stringify(data))
            try {
                const response = await axios.post("{{ path('assistant_prompt') }}", data)
                conversation_id = response.data.id
                return response.data.answer

            } catch (error) {
                console.error(error)
                return null
            }
        }
    </script>
{% endblock %}

